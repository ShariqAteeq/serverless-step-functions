service: serverless-step-functions-example

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource: !GetAtt BooksTable.Arn
    - Effect: Allow
      Action: dynamodb:*
      Resource: !GetAtt UsersTable.Arn
    - Effect: Allow
      Action: sns:*
      Resource: arn:aws:sns:us-east-1:<accountId>:NotifyCourier
    - Effect: Allow
      Action: sqs:*
      Resource: arn:aws:sqs:us-east-1:<accountId>:OrdersQueue
    - Effect: Allow
      Action: states:*
      Resource: arn:aws:states:us-east-1:<accountId>:stateMachine:storeCheckoutFlow

plugins:
  - serverless-step-functions

functions:
  checkInventory:
    handler: handler.checkInventory
  calculateTotal:
    handler: handler.calculateTotal
  redeemPoints:
    handler: handler.redeemPoints
  billCustomer:
    handler: handler.billCustomer
  restoreRedeemPoints:
    handler: handler.restoreRedeemPoints
  restoreQuantity:
    handler: handler.restoreQuantity
  sqsWorker:
    handler: handler.sqsWorker
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:<accountId>:OrdersQueue
          batchSize: 1

stepFunctions:
  stateMachines:
    checkoutStoreFlow:
      name: checkoutStoreFlow
      definition:
        StartAt: checkInvntory
        States:
          checkInvntory:
            Type: Task
            Resource:
              Fn::GetAtt: [checkInventory, Arn]
            Next: calculateTotal
            Catch:
              - ErrorEquals: [BookOutOfStock]
                Next: BookOutOfStockError
              - ErrorEquals: [BookNotFound]
                Next: BookNotFoundError
            ResultPath: $.book
          calculateTotal:
            Type: Task
            Resource:
              Fn::GetAtt: [calculateTotal, Arn]
            ResultPath: $.total
            Next: IsRedeemNeeded
          IsRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoionts
            Default: BillCustomer
          RedeemPoionts:
            Type: Task
            Resource:
              Fn::GetAtt: [redeemPoints, Arn]
            ResultPath: $.total
            Catch:
              - ErrorEquals: [States.ALL]
                Next: RedeemPointsError
            Next: BillCustomer
          BillCustomer:
            Type: Task
            Resource:
              Fn::GetAtt: [billCustomer, Arn]
            ResultPath: $.billingStatus
            Retry:
              - ErrorEquals: [states.ALL]
                MaxAttempts: 3
            Catch:
              - ErrorEquals: [states.ALL]
                ResultPath: $.customerBilling
                Next: BillingError
            Next: PrepareOrder
          PrepareOrder: #Add to the queue, lambda worker, will allocate the quirier by calling a 3rd party api and reduce the amount from the item
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: https://sqs.us-east-1.amazonaws.com/<accountId>/OrdersQueue
              MessageBody:
                Input.$: "$"
                Token.$: "$$.Task.Token" #From the context
            ResultPath: "$.courierStatus"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder
          DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: arn:aws:sns:us-east-1:<accountId>:NotifyCourier
              Message.$: "$"
            Next: Dispatched
          Dispatched:
            Type: Pass
            Result: "Your order will be dispatched in 24 hours"
            End: true
          BookOutOfStockError:
            Type: Pass
            Result: "Book is out of stock"
            End: true
          BookNotFoundError:
            Type: Pass
            Result: "Book not found"
            End: true
          RedeemPointsError:
            Type: Pass
            Result: "Error in redeeming points"
            End: true
          BillingError:
            Type: Pass
            Result: "Error in billing"
            ResultPath: $.billingStatus
            Next: RestoreRedeemPoints
          RestoreRedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreRedeemPoints, Arn]
            End: true

resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
        TableName: stepfunction-books
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        TableName: stepfunction-users
      